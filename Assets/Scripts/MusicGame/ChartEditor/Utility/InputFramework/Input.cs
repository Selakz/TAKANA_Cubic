//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ForTestInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ForTestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""TestAction"",
            ""id"": ""ce0b5127-da26-4d3b-9dcb-b83b79b8bb08"",
            ""actions"": [
                {
                    ""name"": ""Multi"",
                    ""type"": ""Button"",
                    ""id"": ""59ba2e70-0e31-4d21-987b-b25f2ba166b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NoModifier"",
                    ""type"": ""Button"",
                    ""id"": ""8841de12-4cdd-43bf-86a4-673e5b8479e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OneModifier"",
                    ""type"": ""Button"",
                    ""id"": ""a2896df5-071e-4335-8fcf-aa6ef3b49bf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwoModifier"",
                    ""type"": ""Button"",
                    ""id"": ""efc9ee18-9565-4b34-9c39-37c7a7e77b69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f8cdba4-242d-4568-b33f-e51a8312571c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""test scheme"",
                    ""action"": ""Multi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38b99f12-4c6b-4761-9279-22eab4fe5deb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""test scheme"",
                    ""action"": ""Multi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abab70ce-a94d-468f-83ca-43102d59b148"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""test scheme"",
                    ""action"": ""Multi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""847f76a6-006d-4c7d-a423-9c0c512dd98a"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneModifier"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ee2863c9-ea69-4626-a204-758ca7f56884"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""9968d64f-1117-4796-bb7d-dbb41556e1e3"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""09346d84-8f56-49ad-bb41-524375025530"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoModifier"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""9db51954-e851-4fd0-be36-91b807b1407e"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""48658ed6-9efc-46b1-87dc-c26deeff845f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""6487bcde-5c40-4711-8716-c58ad6609a1f"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""16bb7704-c309-4f6c-957e-16de3a95b743"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoModifier"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""0c60f4b7-f239-4b40-b3f7-ab904ee36679"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ea693800-4989-4a03-b9f3-a58f0c287618"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""NewTest"",
            ""id"": ""b39ffa48-3672-4c76-905e-b89a5b08ff4c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2d058b54-b186-45f2-8fcf-f1d487704556"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6dc9f78a-8776-425b-b899-a4e370e96f49"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HotKeys"",
            ""id"": ""45981781-00b1-480a-bcbf-2d8b81f7ca8d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""06d16036-182a-4bf7-8017-f75dd6e7665a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba36a5ef-555e-4d6c-9806-3bd5aed3e7f3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input"",
            ""id"": ""7f693445-876e-4062-bd79-7821b10c13e3"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""fd66ca57-46fd-4f46-b94a-cba2ddf2eb32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fbe76815-080e-4e61-afab-77dbdc5fd00e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""test scheme"",
            ""bindingGroup"": ""test scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""test2"",
            ""bindingGroup"": ""test2"",
            ""devices"": []
        }
    ]
}");
        // TestAction
        m_TestAction = asset.FindActionMap("TestAction", throwIfNotFound: true);
        m_TestAction_Multi = m_TestAction.FindAction("Multi", throwIfNotFound: true);
        m_TestAction_NoModifier = m_TestAction.FindAction("NoModifier", throwIfNotFound: true);
        m_TestAction_OneModifier = m_TestAction.FindAction("OneModifier", throwIfNotFound: true);
        m_TestAction_TwoModifier = m_TestAction.FindAction("TwoModifier", throwIfNotFound: true);
        // NewTest
        m_NewTest = asset.FindActionMap("NewTest", throwIfNotFound: true);
        m_NewTest_Newaction = m_NewTest.FindAction("New action", throwIfNotFound: true);
        // HotKeys
        m_HotKeys = asset.FindActionMap("HotKeys", throwIfNotFound: true);
        m_HotKeys_Newaction = m_HotKeys.FindAction("New action", throwIfNotFound: true);
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_Newaction = m_Input.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestAction
    private readonly InputActionMap m_TestAction;
    private List<ITestActionActions> m_TestActionActionsCallbackInterfaces = new List<ITestActionActions>();
    private readonly InputAction m_TestAction_Multi;
    private readonly InputAction m_TestAction_NoModifier;
    private readonly InputAction m_TestAction_OneModifier;
    private readonly InputAction m_TestAction_TwoModifier;
    public struct TestActionActions
    {
        private @ForTestInput m_Wrapper;
        public TestActionActions(@ForTestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Multi => m_Wrapper.m_TestAction_Multi;
        public InputAction @NoModifier => m_Wrapper.m_TestAction_NoModifier;
        public InputAction @OneModifier => m_Wrapper.m_TestAction_OneModifier;
        public InputAction @TwoModifier => m_Wrapper.m_TestAction_TwoModifier;
        public InputActionMap Get() { return m_Wrapper.m_TestAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActionActions set) { return set.Get(); }
        public void AddCallbacks(ITestActionActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionActionsCallbackInterfaces.Add(instance);
            @Multi.started += instance.OnMulti;
            @Multi.performed += instance.OnMulti;
            @Multi.canceled += instance.OnMulti;
            @NoModifier.started += instance.OnNoModifier;
            @NoModifier.performed += instance.OnNoModifier;
            @NoModifier.canceled += instance.OnNoModifier;
            @OneModifier.started += instance.OnOneModifier;
            @OneModifier.performed += instance.OnOneModifier;
            @OneModifier.canceled += instance.OnOneModifier;
            @TwoModifier.started += instance.OnTwoModifier;
            @TwoModifier.performed += instance.OnTwoModifier;
            @TwoModifier.canceled += instance.OnTwoModifier;
        }

        private void UnregisterCallbacks(ITestActionActions instance)
        {
            @Multi.started -= instance.OnMulti;
            @Multi.performed -= instance.OnMulti;
            @Multi.canceled -= instance.OnMulti;
            @NoModifier.started -= instance.OnNoModifier;
            @NoModifier.performed -= instance.OnNoModifier;
            @NoModifier.canceled -= instance.OnNoModifier;
            @OneModifier.started -= instance.OnOneModifier;
            @OneModifier.performed -= instance.OnOneModifier;
            @OneModifier.canceled -= instance.OnOneModifier;
            @TwoModifier.started -= instance.OnTwoModifier;
            @TwoModifier.performed -= instance.OnTwoModifier;
            @TwoModifier.canceled -= instance.OnTwoModifier;
        }

        public void RemoveCallbacks(ITestActionActions instance)
        {
            if (m_Wrapper.m_TestActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActionActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActionActions @TestAction => new TestActionActions(this);

    // NewTest
    private readonly InputActionMap m_NewTest;
    private List<INewTestActions> m_NewTestActionsCallbackInterfaces = new List<INewTestActions>();
    private readonly InputAction m_NewTest_Newaction;
    public struct NewTestActions
    {
        private @ForTestInput m_Wrapper;
        public NewTestActions(@ForTestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_NewTest_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_NewTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewTestActions set) { return set.Get(); }
        public void AddCallbacks(INewTestActions instance)
        {
            if (instance == null || m_Wrapper.m_NewTestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewTestActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INewTestActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INewTestActions instance)
        {
            if (m_Wrapper.m_NewTestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewTestActions instance)
        {
            foreach (var item in m_Wrapper.m_NewTestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewTestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewTestActions @NewTest => new NewTestActions(this);

    // HotKeys
    private readonly InputActionMap m_HotKeys;
    private List<IHotKeysActions> m_HotKeysActionsCallbackInterfaces = new List<IHotKeysActions>();
    private readonly InputAction m_HotKeys_Newaction;
    public struct HotKeysActions
    {
        private @ForTestInput m_Wrapper;
        public HotKeysActions(@ForTestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_HotKeys_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_HotKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HotKeysActions set) { return set.Get(); }
        public void AddCallbacks(IHotKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_HotKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HotKeysActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IHotKeysActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IHotKeysActions instance)
        {
            if (m_Wrapper.m_HotKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHotKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_HotKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HotKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HotKeysActions @HotKeys => new HotKeysActions(this);

    // Input
    private readonly InputActionMap m_Input;
    private List<IInputActions> m_InputActionsCallbackInterfaces = new List<IInputActions>();
    private readonly InputAction m_Input_Newaction;
    public struct InputActions
    {
        private @ForTestInput m_Wrapper;
        public InputActions(@ForTestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Input_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void AddCallbacks(IInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInputActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActions @Input => new InputActions(this);
    private int m_testschemeSchemeIndex = -1;
    public InputControlScheme testschemeScheme
    {
        get
        {
            if (m_testschemeSchemeIndex == -1) m_testschemeSchemeIndex = asset.FindControlSchemeIndex("test scheme");
            return asset.controlSchemes[m_testschemeSchemeIndex];
        }
    }
    private int m_test2SchemeIndex = -1;
    public InputControlScheme test2Scheme
    {
        get
        {
            if (m_test2SchemeIndex == -1) m_test2SchemeIndex = asset.FindControlSchemeIndex("test2");
            return asset.controlSchemes[m_test2SchemeIndex];
        }
    }
    public interface ITestActionActions
    {
        void OnMulti(InputAction.CallbackContext context);
        void OnNoModifier(InputAction.CallbackContext context);
        void OnOneModifier(InputAction.CallbackContext context);
        void OnTwoModifier(InputAction.CallbackContext context);
    }
    public interface INewTestActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IHotKeysActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInputActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
